name: Deploy to AWS Amplify (Prod)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # For production we use direct environment configuration rather than workflow_run
      - name: Get secrets from AWS Secrets Manager
        run: |
          # Get the secrets ARNs from CDK outputs
          APP_SECRETS_ARN=$(aws cloudformation describe-stacks --stack-name SpotifyFollowManagerInfraStack-prod --query "Stacks[0].Outputs[?OutputKey=='AppSecretArnprod'].OutputValue" --output text)
          DB_SECRET_ARN=$(aws cloudformation describe-stacks --stack-name SpotifyFollowManagerInfraStack-prod --query "Stacks[0].Outputs[?OutputKey=='DatabaseSecretArnprod'].OutputValue" --output text)
          DB_URL=$(aws cloudformation describe-stacks --stack-name SpotifyFollowManagerInfraStack-prod --query "Stacks[0].Outputs[?OutputKey=='DatabaseURLprod'].OutputValue" --output text)
          AMPLIFY_URL=$(aws cloudformation describe-stacks --stack-name SpotifyFollowManagerInfraStack-prod --query "Stacks[0].Outputs[?OutputKey=='AmplifyBranchURLprod'].OutputValue" --output text)
          
          echo "Creating environment variables file for Amplify"
          echo "{" > amplify-env.json
          echo "  \"NODE_ENV\": \"production\"," >> amplify-env.json
          echo "  \"NEXTAUTH_URL\": \"$AMPLIFY_URL\"," >> amplify-env.json
          echo "  \"ENV_NAME\": \"prod\"" >> amplify-env.json
          
          # Get app secrets
          if [ ! -z "$APP_SECRETS_ARN" ]; then
            echo "Retrieved App Secrets ARN: $APP_SECRETS_ARN"
            SECRETS=$(aws secretsmanager get-secret-value --secret-id $APP_SECRETS_ARN --query SecretString --output text)
            AUTH_SECRET=$(echo $SECRETS | jq -r '.AUTH_SECRET')
            SPOTIFY_CLIENT_ID=$(echo $SECRETS | jq -r '.SPOTIFY_CLIENT_ID')
            SPOTIFY_CLIENT_SECRET=$(echo $SECRETS | jq -r '.SPOTIFY_CLIENT_SECRET')
            
            echo "," >> amplify-env.json
            echo "  \"AUTH_SECRET\": \"$AUTH_SECRET\"," >> amplify-env.json
            echo "  \"SPOTIFY_CLIENT_ID\": \"$SPOTIFY_CLIENT_ID\"," >> amplify-env.json
            echo "  \"SPOTIFY_CLIENT_SECRET\": \"$SPOTIFY_CLIENT_SECRET\"" >> amplify-env.json
          fi
          
          # Get DB credentials
          if [ ! -z "$DB_SECRET_ARN" ]; then
            echo "Retrieved Database Secret ARN: $DB_SECRET_ARN"
            DB_SECRETS=$(aws secretsmanager get-secret-value --secret-id $DB_SECRET_ARN --query SecretString --output text)
            DB_PASSWORD=$(echo $DB_SECRETS | jq -r '.password')
            PROCESSED_DB_URL=$(echo $DB_URL | sed "s|{{resolve:secretsmanager:[^}]\+}}|$DB_PASSWORD|") 
            
            echo "," >> amplify-env.json
            echo "  \"DATABASE_URL\": \"$PROCESSED_DB_URL\"" >> amplify-env.json
          fi
          
          # Close JSON
          echo "}" >> amplify-env.json

      - name: Check S3 bucket info
        run: |
          echo "S3 Bucket: $S3_BUCKET"
          echo "S3 Env Path: $S3_ENV_PATH"
          
      - name: Download environment variables from S3
        run: |
          if [ -n "$S3_ENV_PATH" ]; then
            aws s3 cp "$S3_ENV_PATH" ./amplify-env.json
            echo "Downloaded environment variables from S3"
          else
            echo "No S3 environment path found. Creating minimal env file."
            echo '{"NODE_ENV":"production"}' > ./amplify-env.json
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install Amplify CLI
        run: npm install -g @aws-amplify/cli

      - name: Configure environment variables in Amplify
        run: |
          # Read environment variables from JSON file
          cat amplify-env.json | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > amplify.env
          
          # Loop through and set each environment variable in Amplify
          cat amplify.env | while read -r line; do
            KEY=$(echo "$line" | cut -d= -f1)
            VALUE=$(echo "$line" | cut -d= -f2-)
            # Set the environment variable in Amplify
            echo "Setting $KEY in Amplify environment"
            aws amplify update-app --app-id $AMPLIFY_APP_ID --environment-variables "$KEY=$VALUE"
          done

      - name: Publish to Amplify
        run: |
          echo "Publishing to Amplify with standalone Next.js build for API route support"
          yarn amplify:publish:prod
        env:
          AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
          ENV_NAME: prod
          
      - name: Cleanup S3 bucket
        if: always()
        run: |
          if [ -n "$S3_BUCKET" ]; then
            echo "Cleaning up S3 bucket: $S3_BUCKET"
            aws s3 rm "s3://$S3_BUCKET" --recursive
            aws s3 rb "s3://$S3_BUCKET"
          else
            echo "No S3 bucket to clean up"
          fi
